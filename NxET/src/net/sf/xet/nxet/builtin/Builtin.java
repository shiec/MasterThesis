/*
 * Native XML Equivalent Transformation Software Development Kit (NxET)
 * Copyright (C) 2004-2005, Telematics Architecture for Play-based Adaptable System,
 * (TAPAS), Department of Telematics, 
 * Norwegian University of Science and Technology (NTNU),
 * O.S.Bragstads Plass 2, N7491, Trondheim, Norway
 *
 * This file is a part of NxET.
 *
 * NxET is a free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * NxET is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 * 
 */

package net.sf.xet.nxet.builtin;

import java.io.PrintStream;
import net.sf.xet.nxet.core.Node;
import net.sf.xet.nxet.core.World;

/**
 * Builtin class is an abstract class for NxET Built-in Provisioning Framework.
 * Every built-in class has to extends this class in order to make it a fully
 * functional and compatible built-in. Each built-in object can refer to its
 * associated built-in atom and the executing world. So, it can get necessary
 * built-in parameters.<br> 
 * <br>
 * The inclusion of world makes the creation of the "set-of"
 * built-in possible because the "set-of" has to create a new world with the
 * same rules from the old world.<br>
 * <br>
 * The PrintStream "out" allows the built-in to print debugging outputs if
 * necessary.<br>
 * <br>
 * Each built-in will feature three important methods.<br>
 * <br>
 * 1. isMatched method.<br>
 * <br> 
 * This method will determine if the built-in structure contains all required 
 * parameter or not. For example, Add built-in requires three parameters that 
 * are number1, number2 and result. If the built-in cannot find all three 
 * parameters, it will return false.<br>
 * <br>
 * 2. isExecutable method.<br>
 * This method will determine if the built-in parameters can be used to execute
 * the built-in. Generally, the "isMatched" function checks whether the
 * structure of the built-in has complete list of parameter while the
 * "isExecutable" function determines if those parameters, if completed, are
 * not still un-instantiated and cannot be used. The reason why these two
 * methods are separated because the nature of D-rule and N-rule. In D-rule,
 * a built-in, if contains uninstantiated variable(s), will fail immediately.
 * In N-rule, NxET allows the built-in to wait for other atoms to calculate
 * the value of the variable first.<br>
 * <br>
 * 3. execute method.<br>
 * This method really execute the built-in. An "ExecutionResult" object
 * will be created and returned.
 * 
 * 
 * @author Paramai Supadulchai
 */
public abstract class Builtin {
    
    /**
     * The built-in can only be a D-atom
     * @since NxET 0.3
     */
    public static final int BT_D = 0;
    /**
     * The built-in can only be an N-atom
     * @since NxET 0.3
     */
    public static final int BT_N = 1;
    /**
     * The built-in can be used as both D- and N-atom
     * @since NxET 0.3
     */
    public static final int BT_B = 2;
    
    // The atom of this builtin
    protected Node builtinAtom = null;
    // The place to print out the output possibly generated by this function
    protected PrintStream out = null;
    // Pointer to the world environment that executes this builtin
    protected World world = null;
    // Builtin type
    protected int builtinType = 2;
    // The place where this built-in is executed
    protected int place = 0;
   
    /**
     * The constructor to create a builtin object from the builtin atom.
     * The default output PrintStream is assigned as System.out automatically.
     * 
     * @param builtinAtom the builtin atom
     * @param world the world
     * @param place The place the built-in is executed
     */
    public Builtin(Node builtinAtom, World world, Integer place) {
        
        this(builtinAtom, world, place, System.out);
        
    }
    
    /**
     * A construct to create a builtin object from the builtin atom
     * and the output PrintStream.
     * 
     * @param builtinAtom The builtin atom
     * @param world The world that this built-in was being executed.
     * @param place The place the built-in is executed
     * @param out The output PrintStream
     */
    public Builtin(Node builtinAtom, World world, Integer place, PrintStream out) {
        
        this.builtinAtom = builtinAtom;
        this.world = world;
        this.out = out;
        this.place = place.intValue();
        
    }
    
    /**
     * Execute the builtin function. There might be some
     * variables instantiated during the execution. 
     * These variables will be stored in a generated 
     * specialization object, which will be included 
     * in the returned ExecutionResult object.
     * 
     * @return Returns an execution result object.
     * @throws NotExecutableException (usually thrown from
     * the wrapper function such as NOT)
     */
    public abstract ExecutionResult execute() throws NotExecutableException;
    
    /**
     * Get the associated built-in atom.
     * 
     * @return Returns the associated builtin atom.
     */
    public Node getBuiltinAtom() {
        return builtinAtom;
    }
    
    /**
     * Get the type of the built-in
     * 
     * @return Returns the built-in type
     * @since NxET 0.3
     */
    public int getBuiltinType() {
        return this.builtinType;
    }
    
    /**
     * Get the place where the built-in
     * is executed
     * 
     * @return Returns the place
     * @since NxET 0.3
     */
    public int getPlace() {
        return this.place;
    }
   
    /**
     * Get the output PrintStream.
     * 
     * @return Returns the output PrintStream.
     */
    public PrintStream getOut() {
        return out;
    }
    
    /**
     * Get the world this built-in is being executed.
     * 
     * @return Returns the world.
     */
    public World getWorld() {
        return world;
    }
    
    /**
     * Check if the builtin atom contains sufficient
     * parameter(s) or child node(s) to execute.
     * 
     * @return Returns true if executable
     */
    public abstract Boolean isExecutable();
    
    /**
     * Check if the structure of the builtin atom matches
     * this builtin function. A built-in function usually
     * requires some parameters. This function checks if
     * those required parameters exist in the built-in atom
     * or not
     * 
     * @return Returns true if matched
     */
    public abstract Boolean isMatched();
    
    /**
     * Set the associated built-in atom
     * 
     * @param builtinAtom The builtin atom to set.
     */
    public void setBuiltinAtom(Node builtinAtom) {
        this.builtinAtom = builtinAtom;
    }
    
    /**
     * Set the built-in type
     *  
     * @param builtinType The built-in type to set
     * @since NxET 0.3
     */
    public void setBuiltinType(int builtinType) {
        this.builtinType = builtinType;
    }
    
    /**
     * Set the place
     *  
     * @param place The place to set
     * @since NxET 0.3
     */
    public void setPlace(int place) {
        this.place = place;
    }
    
    /**
     * Set the output PrintStream
     * 
     * @param out The out to set.
     */
    public void setOut(PrintStream out) {
        this.out = out;
    }
    
    /**
     * Set the world environment the built-in is being
     * executed.
     * 
     * @param world The world to set.
     */
    public void setWorld(World world) {
        this.world = world;
    }
    
    /**
     * Verify if the built-in is used in the right place
     * 
     * @param place a place where this built-in is executed
     * @return Returns true if the built-in is executed in
     * the right place
     */
    public Boolean verifyPlace() {
        if (((this.place == Builtin.BT_D) && (this.builtinType == Builtin.BT_N)) ||
            ((this.place == Builtin.BT_N) && (this.builtinType == Builtin.BT_D))) {
            return new Boolean(false);
        } else {
            return new Boolean(true);
        }
    }
    
}
